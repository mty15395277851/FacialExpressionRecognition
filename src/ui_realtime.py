# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui_realtime.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtMultimediaWidgets import QVideoWidget
from PyQt5.QtCore import QTimer
from recognition_camera import *
from recognition_video import *


class Realtime_Window(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1580, 1380)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("QPushButton\n"
                                         "{\n"
                                         "    background-color: transparent;\n"
                                         "}")
        self.centralwidget.setObjectName("centralwidget")
        self.home = QtWidgets.QPushButton(self.centralwidget)
        self.home.setGeometry(QtCore.QRect(40, -10, 200, 100))
        self.home.setStyleSheet("QPushButton #home\n"
                                "{\n"
                                "    border-image:url(:/pic/home.png);\n"
                                "}\n"
                                "QPushButton #home:hover\n"
                                "{\n"
                                "    border-image:url(:/pic/home_hover.png);\n"
                                "}\n"
                                "QPushButton #home:pressed\n"
                                "{\n"
                                "    border-image:url(:/pic/home_pressed.png);\n"
                                "}")
        self.home.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("pic/HOME.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.home.setIcon(icon)
        self.home.setIconSize(QtCore.QSize(400, 300))
        self.home.setObjectName("home")
        self.help = QtWidgets.QPushButton(self.centralwidget)
        self.help.setGeometry(QtCore.QRect(230, -10, 200, 100))
        self.help.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("pic/HELP.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.help.setIcon(icon1)
        self.help.setIconSize(QtCore.QSize(400, 300))
        self.help.setObjectName("help")
        self.processBar = QtWidgets.QLabel(self.centralwidget)
        self.processBar.setGeometry(QtCore.QRect(90, 960, 880, 65))
        self.processBar.setText("")
        self.processBar.setPixmap(QtGui.QPixmap("pic/progress_pic.png"))
        self.processBar.setScaledContents(True)
        self.processBar.setObjectName("processBar")
        self.video = QVideoWidget(self.centralwidget)
        self.video.setGeometry(QtCore.QRect(85, 195, 885, 620))
        self.video.setStyleSheet("background-color: rgba(8,13,19,100);")
        self.video.setObjectName("video")
        self.imageBox = QtWidgets.QLabel(self.video)
        self.imageBox.setGeometry(QtCore.QRect(0, 0, 885, 620))
        self.imageBox.setStyleSheet("QLabel{\n"
                                    "background-color: rgba(8,13,19,100);\n"
                                    "}")
        self.imageBox.setText("")
        self.imageBox.setScaledContents(True)
        self.imageBox.setObjectName("imageBox")
        self.camButton = QtWidgets.QPushButton(self.centralwidget)
        self.camButton.setGeometry(QtCore.QRect(735, 825, 91, 71))
        self.camButton.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("pic/live_cam.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.camButton.setIcon(icon2)
        self.camButton.setIconSize(QtCore.QSize(100, 100))
        self.camButton.setCheckable(True)
        self.camButton.setAutoRepeat(False)
        self.camButton.setAutoExclusive(False)
        self.camButton.setObjectName("camButton")
        self.uploadButton = QtWidgets.QPushButton(self.centralwidget)
        self.uploadButton.setGeometry(QtCore.QRect(880, 825, 91, 71))
        self.uploadButton.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("pic/upload.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.uploadButton.setIcon(icon3)
        self.uploadButton.setIconSize(QtCore.QSize(100, 100))
        self.uploadButton.setObjectName("uploadButton")
        self.background = QtWidgets.QLabel(self.centralwidget)
        self.background.setGeometry(QtCore.QRect(-2, 0, 1928, 1081))
        self.background.setText("")
        self.background.setPixmap(QtGui.QPixmap("pic/realtime_bg.png"))
        self.background.setScaledContents(True)
        self.background.setObjectName("background")
        self.time = QtWidgets.QLabel(self.centralwidget)
        self.time.setGeometry(QtCore.QRect(440, 8, 491, 51))
        self.time.setStyleSheet("QLabel{\n"
                                "    color: rgba(232, 232, 232,240);\n"
                                "    font: 28pt \"Impact\";\n"
                                "}")
        self.time.setText("")
        self.time.setAlignment(QtCore.Qt.AlignCenter)
        self.time.setObjectName("time")
        self.processing = QtWidgets.QLabel(self.centralwidget)
        self.processing.setGeometry(QtCore.QRect(55, 960, 940, 74))
        self.processing.setText("")
        self.processing.setScaledContents(True)
        self.processing.setObjectName("processing")
        self.videoFrame = QtWidgets.QLabel(self.centralwidget)
        self.videoFrame.setGeometry(QtCore.QRect(40, 150, 980, 780))
        self.videoFrame.setText("")
        self.videoFrame.setPixmap(QtGui.QPixmap("pic/solit1.png"))
        self.videoFrame.setScaledContents(True)
        self.videoFrame.setObjectName("videoFrame")
        self.camCloseButton = QtWidgets.QPushButton(self.centralwidget)
        self.camCloseButton.setGeometry(QtCore.QRect(590, 825, 91, 71))
        self.camCloseButton.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("pic/live_cam_close.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.camCloseButton.setIcon(icon4)
        self.camCloseButton.setIconSize(QtCore.QSize(100, 100))
        self.camCloseButton.setObjectName("camCloseButton")
        self.infoBar_3 = QtWidgets.QLabel(self.centralwidget)
        self.infoBar_3.setGeometry(QtCore.QRect(1070, 130, 700, 831))
        self.infoBar_3.setText("")
        self.infoBar_3.setPixmap(QtGui.QPixmap("pic/new_left.png"))
        self.infoBar_3.setScaledContents(True)
        self.infoBar_3.setObjectName("infoBar_3")
        self.bottomBackground_3 = QtWidgets.QLabel(self.centralwidget)
        self.bottomBackground_3.setGeometry(QtCore.QRect(1490, 110, 411, 391))
        self.bottomBackground_3.setText("")
        self.bottomBackground_3.setPixmap(QtGui.QPixmap("pic/bottom.png"))
        self.bottomBackground_3.setScaledContents(True)
        self.bottomBackground_3.setObjectName("bottomBackground_3")
        self.background.raise_()
        self.videoFrame.raise_()
        self.home.raise_()
        self.help.raise_()
        self.processBar.raise_()
        self.video.raise_()
        self.camButton.raise_()
        self.uploadButton.raise_()
        self.time.raise_()
        self.processing.raise_()
        self.camCloseButton.raise_()
        self.infoBar_3.raise_()
        self.bottomBackground_3.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        def open_file_browser(q_label=None):
            try:

                self.imageBox.setText("")
                self.camButton.setEnabled(False)
                self.uploadButton.setEnabled(False)

                # create the timer to update the video
                self.timer = QTimer()
                self.timer.timeout.connect(update_frame)

                file_name, file_type = QtWidgets.QFileDialog.getOpenFileName(caption="选取图片", directory="./input/test/",
                                                                             filter="All Files (*);;Text Files (*.txt)")
                self.cap = cv2.VideoCapture(self.fileName)

                if file_name is not None and file_name != "":
                    self.frameRate = self.cap.get(cv2.CAP_PROP_FPS)

                    flag = self.cap.open(self.fileName)
                    frame = predict_expression_1(file_name)
                    self.video = cv2.VideoCapture(frame)

                    self.keep_analysing = True
                    if flag == False:  # flag represents if it is successful
                        msg = QtWidgets.QMessageBox.warning(self, 'warning', 'Cannot read video file',
                                                            buttons=QtWidgets.QMessageBox.Ok)
                        self.keep_analysing = False
                    else:
                        self.self.timer.start(30)  # start timer


            except Exception as e:
                print(e)

        def update_frame(self):
            # read the next frame of the video
            ret, frame = self.video.read()

            # convert the frame to RGB format
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

            # create a QImage from the frame
            image = QImage(frame, frame.shape[1], frame.shape[0], QImage.Format_RGB888)
            q_img = QImage(frame.data, frame.shape[1], frame.shape[0], frame.shape[1] * 3,
                           QImage.Format_RGB888)
            # set the image of the label
            self.imageBox.setPixmap(QtGui.QPixmap.fromImage(q_img))

        def real_Time():
            frame = predict_expression()
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            q_img = QImage(frame.data, frame.shape[1], frame.shape[0], frame.shape[1] * 3,
                           QImage.Format_RGB888)

            self.imageBox.setPixmap(QtGui.QPixmap.fromImage(q_img))

        self.camButton.clicked.connect(real_Time)
        self.uploadButton.clicked.connect(open_file_browser)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
